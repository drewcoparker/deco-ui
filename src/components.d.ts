/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface DecoInput {
    label: string;
    name: string;
    placeHolder: string;
    required: boolean;
    type: string;
  }
}
export interface DecoInputCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLDecoInputElement;
}
declare global {
  interface HTMLDecoInputElementEventMap {
    inputBlur: any;
  }
  interface HTMLDecoInputElement extends Components.DecoInput, HTMLStencilElement {
    addEventListener<K extends keyof HTMLDecoInputElementEventMap>(
      type: K,
      listener: (this: HTMLDecoInputElement, ev: DecoInputCustomEvent<HTMLDecoInputElementEventMap[K]>) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLDecoInputElementEventMap>(
      type: K,
      listener: (this: HTMLDecoInputElement, ev: DecoInputCustomEvent<HTMLDecoInputElementEventMap[K]>) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }
  var HTMLDecoInputElement: {
    prototype: HTMLDecoInputElement;
    new (): HTMLDecoInputElement;
  };
  interface HTMLElementTagNameMap {
    'deco-input': HTMLDecoInputElement;
  }
}
declare namespace LocalJSX {
  interface DecoInput {
    label?: string;
    name: string;
    onInputBlur?: (event: DecoInputCustomEvent<any>) => void;
    placeHolder?: string;
    required?: boolean;
    type?: string;
  }
  interface IntrinsicElements {
    'deco-input': DecoInput;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'deco-input': LocalJSX.DecoInput & JSXBase.HTMLAttributes<HTMLDecoInputElement>;
    }
  }
}
